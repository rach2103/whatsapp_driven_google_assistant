version: '3.8'

services:
  # Court Data Fetcher Application
  court-fetcher:
    build: .
    container_name: court-data-fetcher
    ports:
      - "5000:5000"
    environment:
      # Flask Configuration
      - FLASK_ENV=production
      - FLASK_DEBUG=false
      - FLASK_SECRET_KEY=${FLASK_SECRET_KEY:-dev-secret-key-change-in-production}
      
      # Database Configuration
      - DATABASE_URL=sqlite:///court_data.db
      
      # CAPTCHA Solving
      - TWOCAPTCHA_API_KEY=${TWOCAPTCHA_API_KEY}
      
      # Scraping Configuration
      - REQUEST_TIMEOUT=30
      - MAX_RETRIES=3
      - USER_AGENT=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36
      
      # Court URLs
      - ECOURTS_BASE_URL=https://services.ecourts.gov.in/ecourtindia_v6/
      - DELHI_HC_BASE_URL=https://delhihighcourt.nic.in/
      
      # PDF Configuration
      - PDF_STORAGE_PATH=downloads/pdfs/
      - MAX_PDF_SIZE_MB=50
      
      # Rate Limiting
      - REQUESTS_PER_MINUTE=10
      - CAPTCHA_RETRY_LIMIT=3
      
      # Logging
      - LOG_LEVEL=INFO
      - LOG_FILE=logs/court_fetcher.log
    
    volumes:
      - ./court_data.db:/app/court_data.db
      - ./logs:/app/logs
      - ./downloads:/app/downloads
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    networks:
      - court-network

  # PostgreSQL Database (optional, for production)
  postgres:
    image: postgres:15-alpine
    container_name: court-postgres
    environment:
      - POSTGRES_DB=court_data
      - POSTGRES_USER=court_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-court_password_change_me}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - court-network
    profiles:
      - production

  # Redis (optional, for caching)
  redis:
    image: redis:7-alpine
    container_name: court-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - court-network
    profiles:
      - production

  # Nginx (reverse proxy for production)
  nginx:
    image: nginx:alpine
    container_name: court-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - court-fetcher
    restart: unless-stopped
    networks:
      - court-network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  court-network:
    driver: bridge 